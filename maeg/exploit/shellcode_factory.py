import logging
from rex.exploit import Shellcodes, NoSuchShellcode

l = logging.getLogger("rex.exploit.shellcode_factory")

class ShellcodeFactory(object):
    '''
    Shellcode manager object, manages preferences for shellcode types and in the future, their options
    '''

    DEFAULT_SHELLCODES = {'cgc': 'setregister', 'unix': 'binsh'}

    def __init__(self, project, default=None, shellcode_args=None):
        '''
        :param project: a project option to base shellcode retrieve decisions off of
        :param default: a default shellcode to use
        :param shellcode_args: arguments to pass to the defualt shellcode when constructing
        '''
        self.os = project.loader.main_bin.os
        self.arch = project.arch.name

        self.default = dict(ShellcodeFactory.DEFAULT_SHELLCODES)
        if not default is None:
            self.check_shellcode_existence(default)
            self.default[self.os] = default

        self.shellcode_args = { } if shellcode_args is None else shellcode_args

    def check_shellcode_existence(self, name):
        if not name in Shellcodes[self.os][self.arch]:
            raise NoSuchShellcode("shellcode by name '%s' for os '%s' and arch '%s'" % (name, self.os, self.arch))

    def get_default(self):
        '''
        retrieve the default shellcode as a raw string
        '''
        payload_name = self.default[self.os]
        sc = Shellcodes[self.os][self.arch][payload_name]()
        return sc.to_raw(**self.shellcode_args)

    def set_default(self, new_default):
        '''
        set a new default shellcode
        '''
        self.check_shellcode_existence(new_default)
        self.default[self.os] = new_default

    def get_shellcode(self, payload_name, **kwargs):
        '''
        grab a shellcode with a known name
        '''
        self.check_shellcode_existence(payload_name)
        sc = Shellcodes[self.os][self.arch][payload_name]()
        return sc.to_raw(**kwargs)

    def get_shellcode_template(self, payload_name):
        '''
        grab a shellcode with a known name, do not convert it into raw code or template it
        '''
        self.check_shellcode_existence(payload_name)
        return Shellcodes[self.os][self.arch][payload_name]()
