import angr
import angrop
from .shellcode_factory import ShellcodeFactory
from rex.exploit import CannotExploit

import logging
l = logging.getLogger("rex.exploit.exploit_factory")

class ExploitFactory(object):
    '''
    Exploit factory object responsible for managing exploits and creating exploit objects
    '''

    def __init__(self, crash, shellcode_opts=None, blacklist_techniques=None):
        '''
        :param crash: an exploitable crash object
        :param shellcode_opts: options to pass to the ShellcodeFactory
        :param blacklist_techniques: a set of techniques to skip
        '''

        if not crash.exploitable():
            raise CannotExploit("crash cannot be exploited")

        self.crash = crash

        self.binary = crash.binary

        self.os = crash.project.loader.main_bin.os

        project = angr.Project(self.binary)
        # let's put together our rop gadgets
        self.rop = self.crash.rop

        # and let's gather some shellcode
        shellcode_opts = { } if shellcode_opts is None else shellcode_opts
        self.shellcode = ShellcodeFactory(project, **shellcode_opts)

        self.arsenal = { }

        self.blacklist_techniques = set() if blacklist_techniques is None else blacklist_techniques

    def dump(self):
        for exploit_name in self.arsenal:
            self.arsenal[exploit_name].script("%s.py" % exploit_name)

        return len(self.arsenal)

    def initialize(self):

        for technique in Techniques[self.os]:
            p = technique(self.crash, self.rop, self.shellcode)
            if p.name in self.blacklist_techniques:
                continue
            try:
                l.debug("applying technique %s", p.name)
                self.arsenal[p.name] = p.apply()
            except CannotExploit as e:
                l.debug("technique failed: %s", e.message)

from .techniques import Techniques
